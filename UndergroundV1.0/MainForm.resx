<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAIBoAAAEAIACQDQAAFgAAACgAAAAgAAAANAAAAAEAIAAAAAAAAA0AAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8k3AAfJNwAHyTcDB8k3EYfJNySHyTczB8k
        3O0fJNz7HyTc/B8k3O4fJNzPHyTclR8k3EofJNwOHyTcAB8k3AAfJNwAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8k3AAfJNwAHyTcBR8k3EofJNyzHyTc7x8k
        3P8fJNz/HyTc/x8k3P8fJNz/HyTc/x8k3P8fJNz/HyTc8R8k3LcfJNxPHyTcBx8k3AAfJNwAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfJNwAHyTcAB8k3BcfJNyRHyTc8R8k
        3P8fJNz/HyTc/x8k3P8fJNz/HyTc/x8k3P8fJNz/HyTc/x8k3P8fJNz/HyTc/x8k3PQfJNyXHyTcGx8k
        3AAfJNwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8k3AAfJNwhHyTctB8k
        3P8fJNz/HyTc/x8k3P8fJNz/HyTc/x8k3P8fJNz/HyTc/x8k3P8fJNz/HyTc/x8k3P8fJNz/HyTc/x8k
        3P8fJNy7HyTcJR8k3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfJNwAHyTcFx8k
        3LQfJNz/HyTc/x8k3P8fJNz/HyTc/x8k3P0fJNzgHyTcuB8k3J8fJNyeHyTcth8k3N4fJNz9HyTc/x8k
        3P8fJNz/HyTc/x8k3P8fJNy8HyTcGx8k3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHyTcAB8k
        3AYfJNyQHyTc/h8k3P8fJNz/HyTc/x8k3P8fJNzSHyTcax8k3CMfJNwHHyTcAB8k3AAfJNwHHyTcIR8k
        3GYfJNzNHyTc/x8k3P8fJNz/HyTc/x8k3P8fJNyaHyTcCB8k3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAfJNwAHyTcSh8k3PIfJNz/HyTc/x8k3P8fJNz9HyTcpR8k3CIfJNwAHyTcAB8k3AAfJNwAHyTcAB8k
        3AAfJNwAHyTcAB8k3B4fJNydHyTc+x8k3P8fJNz/HyTc/x8k3PUfJNxSHyTcAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAB8k3AofJNy0HyTc/x8k3P8fJNz/HyTc/x8k3KYfJNwSHyTcAB8k3AAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAfJNwAHyTcAB8k3A4fJNycHyTc/h8k3P8fJNz/HyTc/x8k3LwfJNwOAAAAAAAA
        AAAAAAAAqBkAAKgZAACYGhoAHyTcPB8k3PEfJNz/HyTc/x8k3P8fJNzTHyTcIiYj0QCoGQAAqBkAAKgZ
        AACoGQAAqBkAAKgZAACoGQAAqBkAAKgZAACoGQAAJyPPAB8k3BsfJNzLHyTc/x8k3P8fJNz/HyTc9R8k
        3EV5HUsAqBkAAKgZAACoGQAAqBkAAPQTAAAfJN1/HyTc/x8k3P8fJNz/HyTc/B8k3W1dH3gAqBkAAKgZ
        AACoGQAAqBkAAKgZAACoGQAAqBkAAKgZAACoGQAAqBkAAKgZAACoGQAATSCRAB4k3WEfJNz6HyTc/x8k
        3P8fJNz/HyTdiQBF/wCoGQAAqBkAAKgZAJ2oGACdphQAnYAZPNtyG1P/cxxU/3IbUv90Gk/6lhYVsqcX
        AJ2mFACdphUAnacWAJ2nFgCdpxYAnaYUAJ2mFQCdpxYAnacWAJ2nFgCdphQAnacWAJ2nFwCdmRUQrnUb
        T/hzHFP/cxxU/3IbUv9+GT7fpRUAnqgYAJ2oGQCdqBgA/60lDv/CXk3/vEkz/7g+Jf+wJwz/vk02/8FV
        P//BWUb/sTIb/8FaSP+/VUP/tj8r/7Y/Kv+3QCv/w2BO/7tMOf+1PCf/t0Ar/7dBLf/EZFP/tj0o/7Iz
        Hf/FY1L/uD0l/7g8JP+xKxH/v1A5/8NcSP+8Tjv/qh8H/6gZAP+nFgD/w2FQ/8pyYv/Rhnn/1ZCE/8x4
        av/jtq7/2JiN/8ZoV//VkIT/3KKY/8VnVv/copj/1pKG/9KJfP/JcGD/25+V/92lm//VkIT/04t//79X
        Rf/Tin3/1I6C/8VnVv/VkIT/0oh7/9OJff/hsKf/04t+/8pzZP/AWEb/pxYA/6cWAP/HbF3/t0Iu/8ly
        Yv/isqr/1I2A/9KIe//Zmo//xWZV/9aUiP/fqqH/x2tb/96nnf/Zm5D/04p9/8VlVP/KcmP/36qh/9ma
        j//Ti37/wFdF/9SNgP/VkIP/sTAZ/9SOgf/kt7D/zHlq/9eVif/Ti3//ynJj/8FbSf+nFgD/qBgA/7M3
        If+uKRH/tjoi/8BROv+yLRL/uD0k/8FVP//BW0j/sjQe/8BZR/+8TTr/wFlH/7lGMv+yMx3/w2BO/7pH
        M//AWUf/uEQv/7M2IP/EZFP/t0Ar/7Y9KP+sIgr/u0Qt/79ON/+vJgv/u0Ut/8NbR/+9UT7/qyAI/6gY
        AP+oGQCbpxcAm6cYAJyAGj7bcRtT/3IcVf9yHFT/cxpQ+pYWFbGnFgCbphQAm6YVAJumFACbphUAm6cX
        AJumFACbpxUAm6YUAJunFQCbpxYAm6YUAJunFgCbpxYAm5oZFa10G1D4chtT/3IdVf9yG1T/fRk/36UU
        AJ2oGACbqBkAm6gZAACoGQAA0xYAAB4k3X8fJNz/HyTc/x8k3P8fJNz8HiTdbGseYgCoGQAAqBkAAKgZ
        AACoGQAAqBkAAKgZAACoGQAAqBkAAKgZAACoGQAAqBkAAKgZAABbH3sAHiTdYR8k3PofJNz/HyTc/x8k
        3P8eJN2J/wAAAKgZAACoGQAAqBkAAKgZAACWGh0AHyTcPB8k3PEfJNz/HyTc/x8k3P8fJNzTHyTcIiUj
        0gCoGQAAqBkAAKgZAACoGQAAqBkAAKgZAACoGQAAqBkAAKgZAACoGQAAJiPQAB8k3BsfJNzLHyTc/x8k
        3P8fJNz/HyTc9R8k3EV1HVIAqBkAAKgZAAAAAAAAAAAAAAAAAAAfJNwKHyTctB8k3P8fJNz/HyTc/x8k
        3P8fJNymHyTcER8k3AAfJNwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHyTcAB8k3AAfJNwOHyTcnB8k
        3P4fJNz/HyTc/x8k3P8fJNy8HyTcDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8k3AAfJNxKHyTc8h8k
        3P8fJNz/HyTc/x8k3P0fJNylHyTcIh8k3AAfJNwAHyTcAB8k3AAfJNwAHyTcAB8k3AAfJNwAHyTcHh8k
        3J0fJNz7HyTc/x8k3P8fJNz/HyTc9R8k3FIfJNwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHyTcAB8k
        3AYfJNyQHyTc/h8k3P8fJNz/HyTc/x8k3P8fJNzRHyTcax8k3CMfJNwHHyTcAB8k3AAfJNwHHyTcIR8k
        3GYfJNzNHyTc/x8k3P8fJNz/HyTc/x8k3P8fJNyaHyTcCB8k3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAHyTcAB8k3BcfJNy0HyTc/x8k3P8fJNz/HyTc/x8k3P8fJNz9HyTc4B8k3LgfJNyfHyTcnh8k
        3LYfJNzeHyTc/R8k3P8fJNz/HyTc/x8k3P8fJNz/HyTcvB8k3BwfJNwAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAHyTcAB8k3CEfJNy0HyTc/x8k3P8fJNz/HyTc/x8k3P8fJNz/HyTc/x8k
        3P8fJNz/HyTc/x8k3P8fJNz/HyTc/x8k3P8fJNz/HyTc/x8k3LsfJNwlHyTcAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfJNwAHyTcAB8k3BcfJNyRHyTc8R8k3P8fJNz/HyTc/x8k
        3P8fJNz/HyTc/x8k3P8fJNz/HyTc/x8k3P8fJNz/HyTc/x8k3PQfJNyXHyTcGx8k3AAfJNwAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfJNwAHyTcAB8k3AUfJNxLHyTcsx8k
        3O8fJNz/HyTc/x8k3P8fJNz/HyTc/x8k3P8fJNz/HyTc/x8k3PEfJNy3HyTcUB8k3AcfJNwAHyTcAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHyTcAB8k
        3AAfJNwMHyTcRx8k3JIfJNzMHyTc7R8k3PsfJNz8HyTc7h8k3M8fJNyVHyTcSh8k3A4fJNwAHyTcAB8k
        3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/8AD//8AAP/+AAB//AAAP/gAAB/wAYAP8A/wD+Af
        +AfgP/wH4H/+BwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOB//gfgP/wH4B/4B/AP8A/wAYAP+AAAH/wA
        AD/+AAB//wAA///AA/8=
</value>
  </data>
</root>